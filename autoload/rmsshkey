# vim:ft=zsh:
# rmsshkey removes an ssh key for a hostname and the IP addresses that the
# hostname points at.
#
# -v: Be verbose
# -i: Interactive, confirm each key deletion.
# -n: Dry run mode. Show what actions will be performed, but don't perform
#     them.

# Checks for the existence of required commands
function _rmsshkey_checkcmds {
	local cmd
	for cmd ("dig" "ssh-keygen") {
		if (( ! $+commands[$cmd] )); then
			print "Required command '$cmd' missing."
			return 1
		fi
	}
	return 0
}

# Returns 1 if dry-run mode is enabled, 0 otherwise.
function _rmsshkey_is_dryrun {
	if [[ -n "${(k)_rmsshkeys_opts[-n]}" ]]; then
		return 1
	fi
	return 0
}

# Gets the addresses of a given RRType and hostname
function _rmsshkey_getaddr_type {
	local -r rrtype="$1"
	local -r hostname="$2"
	dig +search +noall +answer -t "${rrtype}" "${hostname}" \
		| awk "{if (\$4 == \"${rrtype}\") { print \$5 }}"
	return $?
}

# Gets A and AAAA records for a given hostname.
function _rmsshkey_getaddrs {
	local -r hostname="$1"
	local addrs
	typeset -a addrs
	local rrtype
	for rrtype ("A" "AAAA") {
		addrs+=($(_rmsshkey_getaddr_type "${rrtype}" "${hostname}"))
	}
	readonly addrs
	echo ${addrs}
	return 0
}

# Checks that a key exists via the exit status of "ssh-keygen -F"
function _rmsshkey_keyexists {
	local -r addr="$1"
	ssh-keygen -F "${addr}" >/dev/null 2>&1
	return $?
}

# Removes a key via "ssh-keygen -R" after checking that the key actually
# exists to begin with. Returns the exit status of the last ssh-keygen
# invocation.
function _rmsshkey_removekey {
	local addr
	for addr ($@) {
		if ! _rmsshkey_keyexists "${addr}"; then
			_rmsshkey_verbose "No key for ${addr}"
			continue;
		fi

		_rmsshkey_verbose "Removing ssh-key for ${addr}"

		if _rmsshkey_is_dryrun; then
			continue
		fi

		ssh-keygen -R "${addr}" >/dev/null 2>&1
	}
}

# Output the given line if verbose mode was set.
function _rmsshkey_verbose {
	local -r msg="$1"
	if [[ -n "${(k)_rmsshkey_opts[-v]}" ]]; then
		print "${msg}"
	fi
}

# Show rmsshkey usage information
function _rmsshkey_usage {
	echo ""
	echo "Usage: rmsshkey [-v] [-n] [-i] [-h] <hostname || IP>"
	echo "   -v: Enable verbose output."
	echo "   -i: Interactive mode, confirm each key deletion."
	echo "   -n: Dry run, show what will happen but don't do it."
	echo "   -h: Show this help"
	return 1
}

function rmsshkey {
	_rmsshkey_checkcmds || return $?

	# Unset the opts array when exiting function.
	TRAPEXIT() {
		unset _rmsshkey_opts
		return $1
	}

	zparseopts -K -D -E -A _rmsshkey_opts -- \
		i=interactive \
		n=dryrun \
		v=verbose \
		h=help

	if [[ $? != 0 || -n "${(k)_rmsshkey_opts[-h]}" ]]; then
		_rmsshkey_usage
		return $?
	fi

	local -r hostname="$1"
	if [ -z "${hostname}" ]; then
		print -u 2 "Provide a hostname to delete the keys for."
		return 1
	fi

	local addrs
	typeset -a addrs
	addrs=($(_rmsshkey_getaddrs "${hostname}"))
	if (( ${#addrs} > 0 )); then
		_rmsshkey_removekey ${addrs}
	fi
	readonly addrs

	# Finally remove key for hostname we were initially given
	_rmsshkey_removekey ${hostname}
}

rmsshkey $@
